AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Nova Ingest - resolve_simbad_metadata Lambda (image-based) with sensible
  defaults.

  '
Parameters:
  ProjectName:
    Type: String
    Default: nova-ingest
  LogLevel:
    Type: String
    Default: INFO
  SimbadTimeoutSec:
    Type: Number
    Default: '15'
  GalaxyListUri:
    Type: String
    Default: s3://nova-data-bucket-finzell/reference/nearby_galaxies.csv
    Description: S3 URI of the nearby galaxies CSV (columns of Galaxy, RA_deg, DEC_deg)
  GalaxyBucketName:
    Type: String
    Default: nova-data-bucket-finzell
    Description: Bucket that holds the galaxies CSV
  S3EndpointUrl:
    Type: String
    Default: ''
    Description: Optional S3 endpoint for local testing (e.g. http://host.docker.internal:4566)
  ADSSecretName:
    Type: String
    Default: ADSQueryToken
    Description: Name of the Secrets Manager secret holding the ADS token
  ADSQueueTableName:
    Type: String
    Default: nova-ingest-ads-queue
    Description: Existing DynamoDB table name for ADS snapshot queue
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Tracing: Active
    Architectures:
    - arm64
    Environment:
      Variables:
        LOG_LEVEL:
          Ref: LogLevel
        SIMBAD_TIMEOUT_SEC:
          Ref: SimbadTimeoutSec
        ASTROPY_CONFIGDIR: /tmp/astropy/config
        ASTROPY_CACHE_DIR: /tmp/astropy/cache
        ASTROQUERY_CACHE_DIR: /tmp/astroquery
        XDG_CACHE_HOME: /tmp/.cache
        HOME: /tmp
    EphemeralStorage:
      Size: 1024
Resources:
  ResolveSimbadMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-resolve-simbad-metadata
      CodeUri:
        Fn::Sub: ${ProjectName}-resolve-simbad-metadata/
      PackageType: Image
      Description: Query SIMBAD for coords/object types/aliases for a candidate nova.
      Policies:
      - AWSLambdaBasicExecutionRole
      ImageUri: resolvesimbadmetadatafunction:resolver
    Metadata:
      DockerBuildArgs:
        HANDLER_PATH: src/resolve_simbad_metadata/app.py
      DockerContext: /Users/tfinzell/Git/aws_novae/nova-ingest
      DockerTag: resolver
      Dockerfile: Dockerfile
      SamResourceId: ResolveSimbadMetadataFunction
  DetermineHostGalaxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: nova-ingest-determine-host-galaxy
      PackageType: Image
      Timeout: 10
      MemorySize: 512
      Environment:
        Variables:
          GALAXY_LIST_URI:
            Ref: GalaxyListUri
          CONFIRM_WITHIN_DEG: '2.0'
          PROBABLE_WITHIN_DEG: '0.5'
          S3_ENDPOINT_URL:
            Ref: S3EndpointUrl
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: GalaxyBucketName
      ImageUri: determinehostgalaxyfunction:host-galaxy
    Metadata:
      DockerBuildArgs:
        HANDLER_PATH: src/determine_host_galaxy/app.py
      DockerContext: /Users/tfinzell/Git/aws_novae/nova-ingest
      DockerTag: host-galaxy
      Dockerfile: Dockerfile
      SamResourceId: DetermineHostGalaxyFunction
  QueryADSBibcodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: nova-ingest-query-ads-bibcodes
      PackageType: Image
      Timeout: 25
      MemorySize: 512
      Environment:
        Variables:
          ADS_API_URL: https://api.adsabs.harvard.edu/v1/search/query
          ADS_SECRET_NAME:
            Ref: ADSSecretName
          ADS_RESOLVER_URL: https://api.adsabs.harvard.edu/v1/resolver
          RESOLVER_MODE: smart
          RESOLVER_TIMEOUT: '6'
          RESOLVER_MAX_CALLS: '200'
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ADSSecretName}*
      ImageUri: queryadsbibcodesfunction:ads-query
    Metadata:
      DockerBuildArgs:
        HANDLER_PATH: src/query_ads_bibcodes/app.py
      DockerContext: /Users/tfinzell/Git/aws_novae/nova-ingest
      DockerTag: ads-query
      Dockerfile: Dockerfile
      SamResourceId: QueryADSBibcodesFunction
  StageWriteMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: nova-ingest-stage-write-metadata
      PackageType: Image
      Timeout: 10
      MemorySize: 512
      Environment:
        Variables:
          STAGING_BUCKET: nova-data-bucket-finzell
          STAGING_PREFIX: staging/metadata
          ADS_STAGING_PREFIX: staging/ads
          WRITE_LATEST: 'true'
          DROP_ADS_FROM_PAYLOAD: 'true'
          ADS_SNAPSHOT_MODE: slim
          TOP_DOCTYPES: circular,catalog,dataset
          BIG_JOURNAL_BIBSTEMS: mnras,aj,apj,a&a,pasp
          EXCLUDED_DOCTYPES: proposal,book,bookreview,editorial,inbook,obituary,inproceedings,phdthesis,talk,software
          PRIORITY_P0: '10'
          PRIORITY_P1: '50'
          PRIORITY_P2: '90'
          PRIORITY_RECENCY_MAX_BONUS: '5'
          PRIORITY_RECENCY_WINDOW_DAYS: '365'
          ELIGIBILITY_RULE_VERSION: '2025-09-07'
          ADS_QUEUE_TABLE:
            Ref: ADSQueueTableName
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3WritePolicy:
          BucketName: nova-data-bucket-finzell
      - Statement:
        - Effect: Allow
          Action: secretsmanager:GetSecretValue
          Resource:
            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ADSQueryToken*
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          Resource:
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ADSQueueTableName}
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ADSQueueTableName}/index/*
      ImageUri: stagewritemetadatafunction:stage-write
    Metadata:
      DockerBuildArgs:
        HANDLER_PATH: src/stage_write_metadata/app.py
      DockerContext: /Users/tfinzell/Git/aws_novae/nova-ingest
      DockerTag: stage-write
      Dockerfile: Dockerfile
      SamResourceId: StageWriteMetadataFunction
  DetermineHostGalaxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${DetermineHostGalaxyFunction}
      RetentionInDays: 30
  ResolveSimbadLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ResolveSimbadMetadataFunction}
      RetentionInDays: 30
  NovaIngestStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: nova-ingest-pipeline
      DefinitionUri: ../../statemachines/nova_ingest.asl.json
      DefinitionSubstitutions:
        ResolveSimbadArn:
          Fn::GetAtt:
          - ResolveSimbadMetadataFunction
          - Arn
        DetermineHostArn:
          Fn::GetAtt:
          - DetermineHostGalaxyFunction
          - Arn
        QueryAdsArn:
          Fn::GetAtt:
          - QueryADSBibcodesFunction
          - Arn
        StageWriteArn:
          Fn::GetAtt:
          - StageWriteMetadataFunction
          - Arn
      Tracing:
        Enabled: true
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - NovaIngestLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ResolveSimbadMetadataFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: DetermineHostGalaxyFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: QueryADSBibcodesFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: StageWriteMetadataFunction
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
          Resource: '*'
  NovaIngestLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/vendedlogs/states/nova-ingest-pipeline
      RetentionInDays: 90
Outputs:
  ResolveSimbadMetadataArn:
    Description: Lambda ARN
    Value:
      Fn::GetAtt:
      - ResolveSimbadMetadataFunction
      - Arn
  DetermineHostGalaxyArn:
    Description: DetermineHostGalaxy Lambda ARN
    Value:
      Fn::GetAtt:
      - DetermineHostGalaxyFunction
      - Arn
